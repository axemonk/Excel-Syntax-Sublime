%YAML 1.2
---
name: Excel formula LYONS THREE
# Made by Alco#0424 and [Q4]Fry#2960
# Repo: https://github.com/axemonk/Excel-formula
# Please send any bug reports and suggestions to Alco#0424 via a direct message on Discord.
# You can find me on the official Sublime Text Discord server.
# v2.2.1 5/1/2023
file_extensions: []
scope: source.excel
version: 2

variables:
  cell: (?:\$?[A-Za-z]+\$?\d+)
  sheet_name_component_delimited: (?:'.+')
  sheet_name_component_normal: \w+
  sheet: (?:(?:{{sheet_name_component_delimited}}|{{sheet_name_component_normal}})+)
  string_wildcard: '[*?]'
  function_name: (?:[A-Za-z\d.]+)

  # https://support.microsoft.com/en-us/office/excel-functions-alphabetical-b3944572-255d-4efb-bb96-c6d90033e188
  function_builtins: |-
    \b(?xi:
      ABS | ACCRINT | ACCRINTM | ACOS | ACOSH | ACOT | ACOTH | AGGREGATE | ADDRESS | AMORDEGRC | AMORLINC | AND | ARABIC | AREAS | ARRAYTOTEXT | ASC | ASIN | ASINH | ATAN | ATAN2 | ATANH | AVEDEV | AVERAGE | AVERAGEA | AVERAGEIF | AVERAGEIFS
    | BAHTTEXT | BASE | BESSELI | BESSELJ | BESSELK | BESSELY | BETADIST | BETA\.DIST | BETAINV | BETA\.INV | BIN2DEC | BIN2HEX | BIN2OCT | BINOMDIST | BINOM\.DIST | BINOM\.DIST\.RANGE | BINOM\.INV | BITAND | BITLSHIFT | BITOR | BITRSHIFT | BITXOR | BYCOL | BYROW
    | CALL | CEILING | CEILING\.MATH | CEILING\.PRECISE | CELL | CHAR | CHIDIST | CHIINV | CHITEST | CHISQ\.DIST | CHISQ\.DIST\.RT | CHISQ\.INV | CHISQ\.INV\.RT | CHISQ\.TEST | CHOOSE | CHOOSECOLS | CHOOSEROWS | CLEAN | CODE | COLUMN | COLUMNS | COMBIN | COMBINA | COMPLEX | CONCAT | CONCATENATE | CONFIDENCE | CONFIDENCE\.NORM | CONFIDENCE\.T | CONVERT | CORREL | COS | COSH | COT | COTH | COUNT | COUNTA | COUNTBLANK | COUNTIF | COUNTIFS | COUPDAYBS | COUPDAYS | COUPDAYSNC | COUPNCD | COUPNUM | COUPPCD | COVAR | COVARIANCE\.P | COVARIANCE\.S | CRITBINOM | CSC | CSCH | CUBEKPIMEMBER | CUBEMEMBER | CUBEMEMBERPROPERTY | CUBERANKEDMEMBER | CUBESET | CUBESETCOUNT | CUBEVALUE | CUMIPMT | CUMPRINC
    | DATE | DATEDIF | DATEVALUE | DAVERAGE | DAY | DAYS | DAYS360 | DB | DBCS | DCOUNT | DCOUNTA | DDB | DEC2BIN | DEC2HEX | DEC2OCT | DECIMAL | DEGREES | DELTA | DEVSQ | DGET | DISC | DMAX | DMIN | DOLLAR | DOLLARDE | DOLLARFR | DPRODUCT | DROP | DSTDEV | DSTDEVP | DSUM | DURATION | DVAR | DVARP
    | EDATE | EFFECT | ENCODEURL | EOMONTH | ERF | ERF\.PRECISE | ERFC | ERFC\.PRECISE | ERF | ERROR\.TYPE | EUROCONVERT | EVEN | EXACT | EXP | EXPAND | EXPON\.DIST | EXPONDIST
    | FACT | FACTDOUBLE | FALSE | F\.DIST | FDIST | F\.DIST\.RT | FILTER | FILTERXML | FIND | FINDB | F\.INV | F\.INV\.RT | FINV | FISHER | FISHERINV | FIXED | FLOOR | FLOOR\.MATH | FLOOR\.PRECISE | FORECAST | FORECAST\.ETS | FORECAST\.ETS\.CONFINT | FORECAST\.ETS\.SEASONALITY | FORECAST\.ETS\.STAT | FORECAST\.LINEAR | FORMULATEXT | FREQUENCY | F\.TEST | FTEST | FV | FVSCHEDULE
    | GAMMA | GAMMA\.DIST | GAMMADIST | GAMMA\.INV | GAMMAINV | GAMMALN | GAMMALN\.PRECISE | GAUSS | GCD | GEOMEAN | GESTEP | GETPIVOTDATA | GROWTH
    | HARMEAN | HEX2BIN | HEX2DEC | HEX2OCT | HLOOKUP | HOUR | HSTACK | HYPERLINK | HYPGEOM\.DIST | HYPGEOMDIST
    | IF | IFERROR | IFNA | IFS | IMABS | IMAGINARY | IMARGUMENT | IMCONJUGATE | IMCOS | IMCOSH | IMCOT | IMCSC | IMCSCH | IMDIV | IMEXP | IMLN | IMLOG10 | IMLOG2 | IMPOWER | IMPRODUCT | IMREAL | IMSEC | IMSECH | IMSIN | IMSINH | IMSQRT | IMSUB | IMSUM | IMTAN | INDEX | INDIRECT | INFO | INT | INTERCEPT | INTRATE | IPMT | IRR | ISBLANK | ISERR | ISERROR | ISEVEN | ISFORMULA | ISLOGICAL | ISNA | ISNONTEXT | ISNUMBER | ISODD | ISOMITTED | ISREF | ISTEXT | ISO\.CEILING | ISOWEEKNUM | ISPMT
    | JIS
    | KURT
    | LAMBDA | LARGE | LCM | LEFT | LEFTB | LEN | LENB | LET | LINEST | LN | LOG | LOG10 | LOGEST | LOGINV | LOGNORM\.DIST | LOGNORMDIST | LOGNORM\.INV | LOOKUP | LOWER
    | MAKEARRAY | MAP | MATCH | MAX | MAXA | MAXIFS | MDETERM | MDURATION | MEDIAN | MID | MIDB | MIN | MINIFS | MINA | MINUTE | MINVERSE | MIRR | MMULT | MOD | MODE | MODE\.MULT | MODE\.SNGL | MONTH | MROUND | MULTINOMIAL | MUNIT
    | N | NA | NEGBINOM\.DIST | NEGBINOMDIST | NETWORKDAYS | NETWORKDAYS\.INTL | NOMINAL | NORM\.DIST | NORMDIST | NORMINV | NORM\.INV | NORM\.S\.DIST | NORMSDIST | NORM\.S\.INV | NORMSINV | NOT | NOW | NPER | NPV | NUMBERVALUE
    | OCT2BIN | OCT2DEC | OCT2HEX | ODD | ODDFPRICE | ODDFYIELD | ODDLPRICE | ODDLYIELD | OFFSET | OR
    | PDURATION | PEARSON | PERCENTILE\.EXC | PERCENTILE\.INC | PERCENTILE | PERCENTRANK\.EXC | PERCENTRANK\.INC | PERCENTRANK | PERMUT | PERMUTATIONA | PHI | PHONETIC | PI | PMT | POISSON\.DIST | POISSON | POWER | PPMT | PRICE | PRICEDISC | PRICEMAT | PROB | PRODUCT | PROPER | PV
    | QUARTILE | QUARTILE\.EXC | QUARTILE\.INC | QUOTIENT
    | RADIANS | RAND | RANDARRAY | RANDBETWEEN | RANK\.AVG | RANK\.EQ | RANK | RATE | RECEIVED | REDUCE | REGISTER\.ID | REPLACE | REPLACEB | REPT | RIGHT | RIGHTB | ROMAN | ROUND | ROUNDDOWN | ROUNDUP | ROW | ROWS | RRI | RSQ | RTD
    | SCAN | SEARCH | SEARCHB | SEC | SECH | SECOND | SEQUENCE | SERIESSUM | SHEET | SHEETS | SIGN | SIN | SINH | SKEW | SKEW\.P | SLN | SLOPE | SMALL | SORT | SORTBY | SQRT | SQRTPI | STANDARDIZE | STOCKHISTORY | STDEV | STDEV\.P | STDEV\.S | STDEVA | STDEVP | STDEVPA | STEYX | SUBSTITUTE | SUBTOTAL | SUM | SUMIF | SUMIFS | SUMPRODUCT | SUMSQ | SUMX2MY2 | SUMX2PY2 | SUMXMY2 | SWITCH | SYD
    | T | TAN | TANH | TAKE | TBILLEQ | TBILLPRICE | TBILLYIELD | T\.DIST | T\.DIST\.2T | T\.DIST\.RT | TDIST | TEXT | TEXTAFTER | TEXTBEFORE | TEXTJOIN | TEXTSPLIT | TIME | TIMEVALUE | T\.INV | T\.INV\.2T | TINV | TOCOL | TOROW | TODAY | TRANSPOSE | TREND | TRIM | TRIMMEAN | TRUE | TRUNC | T\.TEST | TTEST | TYPE
    | UNICHAR | UNICODE | UNIQUE | UPPER
    | VALUE | VALUETOTEXT | VAR | VAR\.P | VAR\.S | VARA | VARP | VARPA | VDB | VLOOKUP | VSTACK
    | WEBSERVICE | WEEKDAY | WEEKNUM | WEIBULL | WEIBULL\.DIST | WORKDAY | WORKDAY\.INTL | WRAPCOLS | WRAPROWS
    | XIRR | XLOOKUP | XMATCH | XNPV | XOR
    | YEAR | YEARFRAC | YIELD | YIELDDISC | YIELDMAT
    | Z\.TEST | ZTEST
    )\b

contexts:
  immediately-pop:
    - match: ''
      pop: 1

  # # Didn't turn out to need one of these
  # else-pop:
  #   - match: (?=\S)
  #     pop: 1

  main:
    # Matches assignment operator '='
    - match: ^=
      scope: keyword.operator.assignment.excel

    # The weird text-qualifier Excel has? Pretend that's a comment.
    - match: ^\'
      scope: punctuation.definition.comment.begin.excel
      # scope: punctuation.definition.string.begin.excel
      push:
        - meta_scope: comment.line.single-quote.excel
        # - meta_scope: string.unquoted.excel
        - match: $
          pop: 1

    # Formulae, etc.
    - include: expressions


  expressions:
    - include: function-calls
    - include: operators
    - include: references
    - include: constants
    - include: arrays
    - include: groups

    # Sanity checks
    - match: '[)}\]]'
      scope: invalid.illegal.stray-bracket-end.excel

    # # Very speculative
    - match: \w+
      scope: variable.other.readwrite.excel

    - match: \t
      scope: invalid.illegal.excel


  function-calls:

    # # Can't decide whether to do things like this or not.
    # - match: \b((?i:(?:COUNT|SUM)?IF))(\()
    #   captures:
    #     1: meta.function-call.excel keyword.control.conditional.if.excel
    #     2: meta.function-call.arguments.excel punctuation.section.arguments.begin.excel
    #   push: function-call-body

    # # TODO: LAMBDA's *last* argument is a calc. Previous args are parameters.
    # #   I don't imagine there's a good way to identify that without branching.
    # # https://support.microsoft.com/en-us/office/lambda-function-bd212d27-1cd1-4321-a34a-ccbf254b8b67

    # # TODO: LET's *last* argument is a calc. Previous args are pairs of variable/assignment.
    # #   I don't imagine there's a good way to identify that without branching.
    # # https://support.microsoft.com/en-us/office/let-function-34842dd8-b92b-4d3f-b325-b8b8f9908999
    # - match: \b((?:LET))(\()
    #   captures:
    #     1: meta.function-call.excel keyword.declaration.excel
    #     2: meta.function-call.arguments.excel punctuation.section.arguments.begin.excel
    #   push: [let-declarations-body, function-call-body]

    # Builtins
    - match: \b({{function_builtins}})(\()
      captures:
        1: meta.function-call.excel support.function.excel
        2: meta.function-call.arguments.excel punctuation.section.arguments.begin.excel
      push: function-call-body

    # Other functions ??
    - match: \b([A-Za-z\.]+)(\()
      captures:
        1: meta.function-call.excel variable.function.excel
        2: meta.function-call.arguments.excel punctuation.section.arguments.begin.excel
      push: function-call-body

  function-call-body:
    - meta_content_scope: meta.function-call.arguments.excel
    - match: \)
      scope: meta.function-call.arguments.excel punctuation.section.arguments.end.excel
      pop: 1
    - match: \,
      scope: punctuation.separator.sequence.excel
    - include: expressions

  # let-declarations-body:
  #   # If you see a function call, pop to normal function call from declaration
  #   # BUG: That's not how LET works.
  #   - match: (?={{function_name}}\()
  #     pop: 1
  #   - include: references
  #   - match: \w+
  #     scope: variable.other.readwrite.excel


  arrays:
    - match: \{
      scope: punctuation.section.braces.begin.excel
      push: array-body

  array-body:
    - meta_scope: meta.array.excel
    - match: \}
      scope: punctuation.section.braces.end.excel
      pop: 1
    - match: \,
      scope: punctuation.separator.sequence.column.excel
    - match: ;
      scope: punctuation.separator.sequence.row.excel
    - include: expressions


  groups:
    - match: \(
      scope: punctuation.section.group.begin.excel
      push: group-body

  group-body:
    - meta_scope: meta.group.excel
    - match: \)
      scope: punctuation.section.group.end.excel
      pop: 1
    - include: expressions


  operators:
    # Matches logical operator (e.g., 'A1 = B2')
    - match: '[=<>]'
      scope: keyword.operator.logical.excel

    # Matches mathematical operators
    - match: '[+\-*/^%]'
      scope: keyword.operator.arithmetic.excel

    - match: \&
      scope: keyword.operator.concatenation.excel


  sheet-reference:
    - match: (?={{sheet}}!)
      push: [cell-or-range-reference-body, sheet-reference-body]

  sheet-reference-body:
    - match: \!
      scope: punctuation.separator.sequence.excel
      pop: 1
    - match: (')
      scope: punctuation.definition.annotation.begin.excel
      push:
        - meta_scope: entity.name.struct.excel
        - match: (')
          scope: punctuation.definition.annotation.end.excel
          pop: 1
    - match: '{{sheet_name_component_normal}}'
      scope: entity.name.struct.excel
    - include: immediately-pop


  cell-or-range-reference:
    - match: (?=[#@]?{{cell}})
      push: cell-or-range-reference-body

  cell-or-range-reference-body:
    - meta_scope: meta.reference.excel

    # Can't seem to get Space to match as an operator
    # # (fails to) Match 'A1:B2 A1:A2' format 'cell:cell cell:cell' references
    # - match: ({{left_cell}})(:)({{right_cell}})( )({{left_cell}})(:)({{right_cell}})
    #   captures:
    #     1: storage.type.excel
    #     2: punctuation.separator.sequence.excel
    #     3: storage.type.excel
    #     4: keyword.operator.reference.excel
    #     5: storage.type.excel
    #     6: punctuation.separator.sequence.excel
    #     7: storage.type.excel
    #   pop: 1

    # Matches A1:B2 format 'cell:cell' references
    - match: ([#@]?)({{cell}})(:)({{cell}})
      captures:
        1: keyword.operator.reference.excel
        2: storage.type.excel
        3: punctuation.separator.sequence.excel
        4: storage.type.excel
      pop: 1

    # Matches A1 format 'cell' references
    - match: ([#@]?)({{cell}})
      captures:
        1: keyword.operator.reference.excel
        2: storage.type.excel
      pop: 1

    # Bail if nothing matches
    - include: immediately-pop


  table-name:
    # Matches table name references
    - match: ([\w.?\\]+)?(\[)
      captures:
        1: entity.name.struct.excel
        2: punctuation.section.brackets.begin.excel
      push: table-name-body

  table-name-body:
    - meta_scope: meta.reference.excel

    # The second group ensures commas and colons can still be used in column names
    # without mismatching them elsewhere
    - match: (\])([,:])?
      captures:
        1: punctuation.section.brackets.end.excel
        2: punctuation.separator.sequence.excel
      pop: 1

    # CHANGE: Matches escaped brackets and operators and prevents conflict between
    # brackets and ,:
    - match: ([,:]*'[\[\]@#][,:]*)
      scope: storage.type.excel

    - match: '[#@]'
      scope: keyword.operator.reference.excel

    - match: \[
      scope: punctuation.section.brackets.begin.excel
      push: table-name-body

    # Anything that should't match but could otherwise be within the body
    # Technically, we could do `.`, but that slows down tokenization
    - match: '[^#@\[\]]+'
      scope: storage.type.excel

  references:
    # # These four were tricky when reworking the scopes to be in line with convention.
    # #
    # # I tried to balance actually having them colored differently in the default sublime color scheme,
    # # as is helpful to have in a tightly-packed Excel formula, while at the same time
    # # having the scope names align with what these various references represent from a code perspective.
    # #
    # # This proved to be *very* difficult for cell and column references (see cop-out: storage.type.excel),
    # # but for sheet and table name references, .struct. seems to fit well under the definition:
    # #
    # # # struct: "a composite data type (or record) declaration that defines a physically grouped list of variables
    # # #          under one name in a block of memory"

    - include: table-name
    - include: sheet-reference
    - include: cell-or-range-reference


  constants:
    - match: \b(?i:TRUE|FALSE)\b
      scope: constant.language.boolean.excel
    - include: numbers
    # TODO: only include wildcards where appropriate
    - include: strings-with-wildcards

    # Here is a list of the most common functions that allow wildcards:
    # AVERAGEIF, AVERAGEIFS
    # COUNTIF, COUNTIFS
    # MAXIFS, MINIFS
    # SUMIF, SUMIFS
    # VLOOKUP, HLOOKUP
    # MATCH
    # SEARCH


  numbers:
    - match: -?\d+(\.)\d*|-?(\.)\d+
      scope: meta.number.float.decimal.excel constant.numeric.value.excel
      captures:
        1: punctuation.separator.decimal.excel
        2: punctuation.separator.decimal.excel
    - match: -?\d+
      scope: meta.number.integer.decimal.excel constant.numeric.value.excel

  strings:
    - match: '"'
      scope: punctuation.definition.string.begin.excel
      push: string-body

  string-body:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.excel

    - match: '""'
      scope: constant.character.escape.excel
    - match: '"'
      scope: punctuation.definition.string.end.excel
      pop: 1

  strings-with-wildcards:
    - match: '"'
      scope: punctuation.definition.string.begin.excel
      push: string-body-with-wildcards

  string-body-with-wildcards:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.excel

    # Tilde escapes wildcards and itself, but can also be used by itself and function as a literal
    - match: ~(?:~|{{string_wildcard}})
      scope: constant.character.escape.excel
    - match: '{{string_wildcard}}'
      scope: keyword.operator.wildcard.excel
    - include: string-body
