%YAML 1.2
---
name: Excel formula
# Made by _alco and @michaelblyons. Thanks to acid_form for the first key bug reports we've received and for the updated builtin function list with Google Sheets functions added.
# Repo: https://github.com/axemonk/Excel-formula
# Please send any bug reports and suggestions to _alco via a direct message on Discord.
# You can find me on the official Sublime Text Discord server.
# v2.5.1 1/3/2025
file_extensions: []
scope: source.excel
version: 2

# TODO: figure out a way to properly scope locale-specific usage of . and , in decimal numbers.
#       Haven't found an example of this breaking anything outright, although.
#       if there is a simple way to match stuff conditional to user locale,
#       swapping ;/, in arrays as column/row separators depending on locale would probably be best practice.


variables:
  cell: (?:\$?[A-Za-z]+\$?\d+)
  column: (?:\$?[A-Za-z]+)
  row: (?:\$?\d+)
  sheet_name_component_delimited: (?:'.+')
  sheet_name_component_normal: \w+
  sheet: (?:(?:{{sheet_name_component_delimited}}|{{sheet_name_component_normal}})+)
  string_wildcard: '[*?]'
  # function_name: (?:[A-Za-z\d.]+)
  before_reference: |-
    (?x:(?=
      @?  # Reference operator
      (?:
        {{cell}}
      | (?:{{column}}|{{row}}):
        (?:{{column}}|{{row}}|{{cell}})
      )
    ))

  # A French MacOS user on dev channel build 4168 was having issues with functions specific to Google Sheets not highlighting properly.
  # They put together the following updated function_builtins list.
  # Relatively major concerns here:
  # - The reporting user's functions would not format if they weren't included in the function_builtins list.
  #   When they manually updated their syntax definition to include their updated version of the builtins list, they said it fixed the problem.
  # - I could not for the life of me recreate their highlighting issue. Could it be due to OS/locale/Sublime differences?
  # - For me, all functions, whether they are in the builtins list or not, match so long as they end with an open parenthesis.
  #   e.g., THISISNOTAREALFUNCTION( turns blue in the default color scheme for me.
  #   In line with previous concerns, the above example THISIS... function does not highlight for them.

  # Update:
  # MS Excel:
  # - https://support.microsoft.com/en-us/office/excel-functions-alphabetical-b3944572-255d-4efb-bb96-c6d90033e188
  # Google Sheets:
  # - https://support.google.com/docs/table/25273
  # As of 12/27/2024

  function_builtins: |-
    \b(?xi:

      (?# Common to both MS Excel and Google Sheets)

      ABS | ACCRINT | ACCRINTM | ACOS | ACOSH | ACOT | ACOTH | ADDRESS | AMORLINC | AND | ARABIC | ASC | ASIN | ASINH | ATAN | ATAN2 | ATANH | AVEDEV | AVERAGE | AVERAGEA | AVERAGEIF | AVERAGEIFS |
      BASE | BETA\.DIST | BETA\.INV | BETADIST | BETAINV | BIN2DEC | BIN2HEX | BIN2OCT | BINOM\.DIST | BINOM\.INV | BINOMDIST | BITAND | BITLSHIFT | BITOR | BITRSHIFT | BITXOR | BYCOL | BYROW |
      CEILING | CEILING\.MATH | CEILING\.PRECISE | CELL | CHAR | CHIDIST | CHIINV | CHISQ\.DIST | CHISQ\.DIST\.RT | CHISQ\.INV | CHISQ\.INV\.RT | CHISQ\.TEST | CHITEST | CHOOSE | CHOOSECOLS | CHOOSEROWS |
      CLEAN | CODE | COLUMN | COLUMNS | COMBIN | COMBINA | COMPLEX | CONCAT | CONCATENATE | CONFIDENCE | CONFIDENCE\.NORM | CONFIDENCE\.T | CONVERT | CORREL | COS | COSH | COT | COTH | COUNT | COUNTA |
      COUNTBLANK | COUNTIF | COUNTIFS | COUPDAYBS | COUPDAYS | COUPDAYSNC | COUPNCD | COUPNUM | COUPPCD | COVAR | COVARIANCE\.P | COVARIANCE\.S | CRITBINOM | CSC | CSCH | CUMIPMT | CUMPRINC |
      DATE | DATEDIF | DATEVALUE | DAVERAGE | DAY | DAYS | DAYS360 | DB | DCOUNT | DCOUNTA | DDB | DEC2BIN | DEC2HEX | DEC2OCT | DECIMAL | DEGREES | DELTA | DEVSQ | DGET | DISC | DMAX | DMIN |
      DOLLAR | DOLLARDE | DOLLARFR | DPRODUCT | DSTDEV | DSTDEVP | DSUM | DURATION | DVAR | DVARP |
      EDATE | EFFECT | ENCODEURL | EOMONTH | ERF | ERF\.PRECISE | ERFC | ERFC\.PRECISE | ERROR\.TYPE | EVEN | EXACT | EXP | EXPON\.DIST | EXPONDIST |
      F\.DIST | F\.DIST\.RT | F\.INV | F\.INV\.RT | F\.TEST | FACT | FACTDOUBLE | FALSE | FDIST | FILTER | FIND | FINDB | FINV | FISHER | FISHERINV | FIXED | FLOOR | FLOOR\.MATH | FLOOR\.PRECISE |
      FORECAST | FORECAST\.LINEAR | FORMULATEXT | FREQUENCY | FTEST | FV | FVSCHEDULE |
      GAMMA | GAMMA\.DIST | GAMMA\.INV | GAMMADIST | GAMMAINV | GAMMALN | GAMMALN\.PRECISE | GAUSS | GCD | GEOMEAN | GESTEP | GETPIVOTDATA | GROWTH |
      HARMEAN | HEX2BIN | HEX2DEC | HEX2OCT | HLOOKUP | HOUR | HSTACK | HYPERLINK | HYPGEOM\.DIST | HYPGEOMDIST |
      IF | IFERROR | IFNA | IFS | IMABS | IMAGE | IMAGINARY | IMARGUMENT | IMCONJUGATE | IMCOS | IMCOSH | IMCOT | IMCSC | IMCSCH | IMDIV | IMEXP | IMLN | IMLOG10 | IMLOG2 | IMPOWER | IMPRODUCT | IMREAL |
      IMSEC | IMSECH | IMSIN | IMSINH | IMSQRT | IMSUB | IMSUM | IMTAN | INDEX | INDIRECT | INT | INTERCEPT | INTRATE | IPMT | IRR | ISBLANK | ISERR | ISERROR | ISEVEN | ISFORMULA | ISLOGICAL | ISNA |
      ISNONTEXT | ISNUMBER | ISO\.CEILING | ISODD | ISOWEEKNUM | ISPMT | ISREF | ISTEXT |
      KURT |
      LAMBDA | LARGE | LCM | LEFT | LEFTB | LEN | LENB | LET | LINEST | LN | LOG | LOG10 | LOGEST | LOGINV | LOGNORM\.DIST | LOGNORM\.INV | LOGNORMDIST | LOOKUP | LOWER |
      MAKEARRAY | MAP | MATCH | MAX | MAXA | MAXIFS | MDETERM | MDURATION | MEDIAN | MID | MIDB | MIN | MINA | MINIFS | MINUTE | MINVERSE | MIRR | MMULT | MOD | MODE | MODE\.MULT | MODE\.SNGL |
      MONTH | MROUND | MULTINOMIAL | MUNIT |
      N | NA | NEGBINOM\.DIST | NEGBINOMDIST | NETWORKDAYS | NETWORKDAYS\.INTL | NOMINAL | NORM\.DIST | NORM\.INV | NORM\.S\.DIST | NORM\.S\.INV | NORMDIST | NORMINV | NORMSDIST | NORMSINV | NOT | NOW | NPER | NPV |
      OCT2BIN | OCT2DEC | OCT2HEX | ODD | OFFSET | OR |
      PDURATION | PEARSON | PERCENTILE | PERCENTILE\.EXC | PERCENTILE\.INC | PERCENTRANK | PERCENTRANK\.EXC | PERCENTRANK\.INC | PERMUT | PERMUTATIONA | PHI | PI | PMT | POISSON | POISSON\.DIST | POWER | PPMT |
      PRICE | PRICEDISC | PRICEMAT | PROB | PRODUCT | PROPER | PV |
      QUARTILE | QUARTILE\.EXC | QUARTILE\.INC | QUOTIENT |
      RADIANS | RAND | RANDARRAY | RANDBETWEEN | RANK | RANK\.AVG | RANK\.EQ | RATE | RECEIVED | REDUCE | REPLACE | REPLACEB | REPT | RIGHT | RIGHTB | ROMAN | ROUND | ROUNDDOWN | ROUNDUP | ROW | ROWS | RRI | RSQ |
      SCAN | SEARCH | SEARCHB | SEC | SECH | SECOND | SEQUENCE | SERIESSUM | SIGN | SIN | SINH | SKEW | SKEW\.P | SLN | SLOPE | SMALL | SORT | SQRT | SQRTPI |
      STANDARDIZE | STDEV | STDEV\.P | STDEV\.S | STDEVA | STDEVP | STDEVPA | STEYX | SUBSTITUTE | SUBTOTAL | SUM | SUMIF | SUMIFS | SUMPRODUCT | SUMSQ | SUMX2MY2 | SUMX2PY2 | SUMXMY2 | SWITCH | SYD |
      T | T\.DIST | T\.DIST\.2T | T\.DIST\.RT | T\.INV | T\.INV\.2T | T\.TEST | TAN | TANH | TBILLEQ | TBILLPRICE | TBILLYIELD | TDIST | TEXT | TEXTJOIN | TIME | TIMEVALUE | TINV | TRANSPOSE | TREND | TRIM | TRIMMEAN |
      TRUE | TRUNC | TTEST | TYPE |
      UNICHAR | UNICODE | UNIQUE | UPPER |
      VALUE | VAR | VAR\.P | VAR\.S | VARA | VARP | VARPA | VDB | VLOOKUP | VSTACK |
      WEEKDAY | WEEKNUM | WEIBULL | WEIBULL\.DIST | WORKDAY | WORKDAY\.INTL | WRAPCOLS | WRAPROWS |
      XIRR | XLOOKUP | XNPV | XOR |
      YEAR | YEARFRAC | YIELD | YIELDDISC | YIELDMAT |
      Z\.TEST | ZTEST |

      (?# MS Excel only)

      AGGREGATE | AMORDEGRC | AREAS | ARRAYTOTEXT |
      BAHTTEXT | BESSELI | BESSELJ | BESSELK | BESSELY | BINOM\.DIST\.RANGE |
      CALL | CUBEKPIMEMBER | CUBEMEMBER | CUBEMEMBERPROPERTY | CUBERANKEDMEMBER | CUBESET | CUBESETCOUNT | CUBEVALUE |
      DBCS | DROP |
      EUROCONVERT | EXPAND |
      FILTERXML | FORECAST\.ETS | FORECAST\.ETS\.CONFINT | FORECAST\.ETS\.SEASONALITY | FORECAST\.ETS\.STAT |
      INFO | ISOMITTED |
      JIS |
      NUMBERVALUE |
      ODDFPRICE | ODDFYIELD | ODDLPRICE | ODDLYIELD |
      PHONETIC |
      REGISTER\.ID | RTD |
      SHEET | SHEETS | SORTBY | STOCKHISTORY |
      TAKE | TEXTAFTER | TEXTBEFORE | TEXTSPLIT | TOCOL | TODAY | TOROW |
      VALUETOTEXT |
      WEBSERVICE |
      XMATCH |

      (?# Google Sheets only)

      ADD | ARRAY_CONSTRAIN | ARRAYFORMULA | AVERAGE\.WEIGHTED |
      COUNTUNIQUE |
      DETECTLANGUAGE | DIVIDE |
      EPOCHTODATE | EQ |
      FLATTEN |
      GOOGLEFINANCE | GOOGLETRANSLATE | GT | GTE |
      IMCOTH | IMLOG | IMPORTDATA | IMPORTFEED | IMPORTHTML | IMPORTRANGE | IMPORTXML | IMTANH | ISBETWEEN | ISDATE | ISEMAIL | ISURL |
      JOIN |
      LT | LTE |
      MARGINOFERROR | MINUS | MULTIPLY |
      NE |
      POW |
      QUERY |
      REGEXEXTRACT | REGEXMATCH | REGEXREPLACE |
      SORTN | SPARKLINE | SPLIT |
      TO_DATE | TO_DOLLARS | TO_PERCENT | TO_PURE_NUMBER | TO_TEXT | TOCOL | TODAY | TOROW |
      UMINUS | UNARY_PERCENT | UNIQUE | UPLUS
    )\b


contexts:

  main:
    # Matches assignment operator '='
    - match: ^=
      scope: keyword.operator.assignment.excel
    - include: comments-text-marker
    - include: expressions

  comments-text-marker:
    # Pretend that the weird plain-text marker Excel uses is a comment
    # TODO: allow this to be used after the start of the document.
    - match: ^\'
      scope: punctuation.definition.comment.begin.excel
      # scope: punctuation.definition.string.begin.excel
      push:
        - meta_scope: comment.line.single-quote.excel
        # - meta_scope: string.unquoted.excel
        - match: $\n?
        # - match: $
          pop: 1

  expressions:
    - include: function-calls
    - include: operators
    - include: references
    - include: constants
    - include: arrays
    - include: groups

    # Sanity checks
    - match: '[)}\]]'
      scope: invalid.illegal.stray-bracket-end.excel

    # Update: allow for named ranges and names defined in LET functions to follow the same naming rules as table and user-defined-function names.
    #         e.g., = LET(
    #                   T\?es.t1Test,
    #                   1,
    #                   T\?es.t1Test
    #               )
    #         is a valid formula.
    #         Was previously just '\w+'


    # TODO: think about flagging illegal names (e.g., '.hello')
    #       this could start to get really messy now that I want to not make Google Sheets user's stuff break
    #       (I also don't like the idea of having to test a million edge cases in both Excel and Sheets).
    # Note: Why is it that the '1' in '=LET(Test1Test,2,Test1Test)' gets scoped correctly when digits aren't specified here?
    #       does it have something to do with '/w'?
    # This is really ugly and I hate it but it works.
    - match: '[\w\\][\w.?\\]+[\w?\\]'
      scope: variable.other.readwrite.excel

    - match: \t
      scope: invalid.illegal.excel

  operators:
    # three or more is wrong
    - match: '[<>=]{3,}'
      scope: invalid.illegal.excel
    # illegal two-character operator combinations
    - match: (?:=[=<>]|>[><]|<<)
      scope: invalid.illegal.excel
    # anything other combo
    - match: '[<>=]+'
      scope: keyword.operator.logical.excel

    # Matches mathematical operators
    - match: '[+\-*/^%]'
      scope: keyword.operator.arithmetic.excel

    - match: \&
      scope: keyword.operator.concatenation.excel

###[ FUNCTIONS ]###############################################################

  function-calls:

    # Update: Make logical flow functions special snowflakes
    # Note:   Should the scope be specific to each of these?
    #         conditional.ifs, conditional.switch etc.
    #         or just conditional.switch and conditional.if for everything else?
    - match: \b((?i:IF|IFS|IFERROR|IFNA|SWITCH))(\()
      captures:
        1: meta.function-call.excel keyword.control.conditional.if.excel
        2: meta.function-call.arguments.excel punctuation.section.arguments.begin.excel
      push: function-call-body

    # Update: Make logical compator functions special snowflakes
    # Note:   What about ISERROR ISNUMBER ISTEXT? (there are like a dozen IS... functions)
    #         My gut tells me to leave them as functions.
    - match: \b((?i:AND|OR|NOT|XOR))(\()
      captures:
        1: meta.function-call.excel keyword.operator.logical.excel
        2: meta.function-call.arguments.excel punctuation.section.arguments.begin.excel
      push: function-call-body

    # # TODO: LAMBDA's *last* argument is a calc. Previous args are parameters.
    # #   I don't imagine there's a good way to identify that without branching.
    # # https://support.microsoft.com/en-us/office/lambda-function-bd212d27-1cd1-4321-a34a-ccbf254b8b67

    # # TODO: LET's *last* argument is a calc. Previous args are pairs of variable/assignment.
    # #   I don't imagine there's a good way to identify that without branching.
    # # https://support.microsoft.com/en-us/office/let-function-34842dd8-b92b-4d3f-b325-b8b8f9908999
    # - match: \b((?:LET))(\()
    #   captures:
    #     1: meta.function-call.excel keyword.declaration.excel
    #     2: meta.function-call.arguments.excel punctuation.section.arguments.begin.excel
    #   push: [let-declarations-body, function-call-body]

    # Builtins
    - match: \b({{function_builtins}})(\()
      captures:
        1: meta.function-call.excel support.function.excel
        2: meta.function-call.arguments.excel punctuation.section.arguments.begin.excel
      push: function-call-body

    # Update: Function naming for user defined functions appears to follow the
    #   same rules as tables. Pattern from table copied here. (capture group 1
    #   was previously '([A-Za-z\.]+)').
    #         e.g., T\?es.t1Test() is a valid function name.
    # User defined and/or functions not included in the builtins. May currently
    #   not work for some users (see comment above builtins).
    - match: \b([\w\\][\w.?\\]+[\w?\\])(\()
      captures:
        1: meta.function-call.excel variable.function.excel
        2: meta.function-call.arguments.excel punctuation.section.arguments.begin.excel
      push: function-call-body

  # Update: allow for ; to be a separator in functions (for locale support).
  function-call-body:
    - meta_content_scope: meta.function-call.arguments.excel
    - match: \)
      scope: meta.function-call.arguments.excel punctuation.section.arguments.end.excel
      pop: 1
    - match: '[\,;]'
      scope: punctuation.separator.sequence.excel
    - include: expressions

  # let-declarations-body:
  #   # If you see a function call, pop to normal function call from declaration
  #   # BUG: That's not how LET works.
  #   - match: (?={{function_name}}\()
  #     pop: 1
  #   - include: references
  #   - match: \w+
  #     scope: variable.other.readwrite.excel

###[ REFERENCES ]##############################################################

  sheet-reference:
    - match: (?={{sheet}}!)
      push: [cell-or-range-reference-body, sheet-reference-body]

  sheet-reference-body:
    - match: \!
      scope: punctuation.separator.sequence.excel
      pop: 1
    - match: (')
      scope: punctuation.definition.annotation.begin.excel
      push:
        - meta_scope: entity.name.struct.excel
        - match: (')
          scope: punctuation.definition.annotation.end.excel
          pop: 1
    - match: '{{sheet_name_component_normal}}'
      scope: entity.name.struct.excel
    - include: immediately-pop

  cell-or-range-reference:
    - match: '{{before_reference}}'
      push: cell-or-range-reference-body

  cell-or-range-reference-body:
    - meta_scope: meta.reference.excel

    # Try to avoid matching names with numbers in the middle.
    # TODO: Is there a more kosher way or location to do this?
    #       the important part here is that we prevent something like 't1'
    #       from being matched as a cell in a name 't1test'
    - match: '[A-Za-z\\?.]+[0-9]+[A-Za-z\\?.]+'
      pop: 1

    # Naked cell reference
    # A1
    # A1#
    # @A1
    # @A1#
    - match: (@?)({{cell}})(#?)(?![:#])
      captures:
        1: keyword.operator.reference.excel
        2: storage.type.excel
        3: keyword.operator.reference.excel
      set: maybe-union-operator

    # Push to dynamic context to isolate forced anonymity to just dynamic refs
    - match: (?=(?:@?{{cell}})(?:(?:#?:{{cell}}#)|(?:#:{{cell}}#?)))
      push: dynamic-reference

    # Cell range without dynamics
    # A1:B2
    # @A1:B2
    - match: (@?)({{cell}})(:)({{cell}})
      captures:
        1: keyword.operator.reference.excel
        2: storage.type.excel
        3: punctuation.separator.sequence.excel
        4: storage.type.excel
      set: maybe-union-operator

    # The Google stuff
    - include: reference-body-google

    # Column to column
    # A:B
    # @A:B
    - match: (@?)({{column}})(:)({{column}})
      captures:
        1: keyword.operator.reference.excel
        2: storage.type.excel
        3: punctuation.separator.sequence.excel
        4: storage.type.excel
      set: maybe-union-operator

    # Row to row
    # 1:2
    # @1:2
    - match: (@?)({{row}})(:)({{row}})
      captures:
        1: keyword.operator.reference.excel
        2: storage.type.excel
        3: punctuation.separator.sequence.excel
        4: storage.type.excel
      set: maybe-union-operator

    # Bail if nothing matches
    - include: immediately-pop

  reference-body-google:
    # The @ operator is not available in Google Sheets

    # Cell to column-or-row
    # A1:B
    # A1:2
    - match: ({{cell}})(?:(:)({{column}}|{{row}}))
      captures:
        1: storage.type.excel
        2: punctuation.separator.sequence.excel
        3: storage.type.excel
      set: maybe-union-operator

    # Column to cell
    # A:B2
    - match: ({{column}})(:)({{cell}})
      captures:
        1: storage.type.excel
        2: punctuation.separator.sequence.excel
        3: storage.type.excel
      set: maybe-union-operator

    # Row to cell
    # 1:B2
    - match: ({{row}})(:)({{cell}})
      captures:
        1: storage.type.excel
        2: punctuation.separator.sequence.excel
        3: storage.type.excel
      set: maybe-union-operator

    # Update: Added this for symmetry.
    # Bail if nothing matches
    - include: immediately-pop

  maybe-union-operator:
    - match: '[ ]{{before_reference}}'
      scope: keyword.operator.set.excel
      set: cell-or-range-reference-body

    # Bail if nothing matches
    - include: immediately-pop

  dynamic-reference:
    # Zero-dimensional cell range w/ dynamics
    # Verified as sregex compatible with \n but not with \k<n>
    # A1#:A1#
    # A1:A1#
    # @A1#:A1#
    # @A1:A1#
    - match: (@?)({{cell}})(#?)(:)(\2)(#)
      captures:
        1: keyword.operator.reference.excel
        2: storage.type.excel
        3: keyword.operator.reference.excel
        4: punctuation.separator.sequence.excel
        5: storage.type.excel
        6: keyword.operator.reference.excel
      set: maybe-union-operator

    # Cell range with dynamics
    # A1#:B2
    # A1#:B2#
    # @A1#:B2
    # @A1#:B2#
    - match: (@?)({{cell}})(#)(:)({{cell}})(#?)
      captures:
        1: keyword.operator.reference.excel
        2: storage.type.excel
        3: keyword.operator.reference.excel
        4: punctuation.separator.sequence.excel
        5: storage.type.excel
        6: keyword.operator.reference.excel
      set: maybe-union-operator

    # Bail if nothing matches
    - include: immediately-pop

  table-name:
    # Matches table name references
    - match: ([\w.?\\]+)?(\[)
      captures:
        1: entity.name.struct.excel
        2: punctuation.section.brackets.begin.excel
      push: table-name-body

  table-name-body:
    - meta_scope: meta.reference.excel

    # The second group ensures commas and colons can still be used in column names
    # without mismatching them elsewhere
    - match: (\])([,:])?
      captures:
        1: punctuation.section.brackets.end.excel
        2: punctuation.separator.sequence.excel
      pop: 1

    - match: ([,:]*'[\[\]@#][,:]*)
      scope: storage.type.excel

    - match: '[#@]'
      scope: keyword.operator.reference.excel

    - match: \[
      scope: punctuation.section.brackets.begin.excel
      push: table-name-body

    # Anything that should't match but could otherwise be within the body
    # Technically, we could do `.`, but that slows down tokenization
    - match: '[^#@\[\]]+'
      scope: storage.type.excel

  references:
    # # These four were tricky when reworking the scopes to be in line with convention.
    # #
    # # I tried to balance actually having them colored differently in the default sublime color scheme,
    # # as is helpful to have in a tightly-packed Excel formula, while at the same time
    # # having the scope names align with what these various references represent from a code perspective.
    # #
    # # This proved to be *very* difficult for cell and column references (see cop-out: storage.type.excel),
    # # but for sheet and table name references, .struct. seems to fit well under the definition:
    # #
    # # # struct: "a composite data type (or record) declaration that defines a physically grouped list of variables
    # # #          under one name in a block of memory"

    - include: table-name
    - include: sheet-reference
    - include: cell-or-range-reference

###[ GROUPS ]##################################################################

  groups:
    - match: \(
      scope: punctuation.section.group.begin.excel
      push: group-body

  group-body:
    - meta_scope: meta.group.excel
    - match: \)
      scope: punctuation.section.group.end.excel
      pop: 1
    - include: expressions

###[ ARRAYS ]##################################################################

  arrays:
    - match: \{
      scope: punctuation.section.braces.begin.excel
      push: array-body

  array-body:
    - meta_scope: meta.array.excel
    - match: \}
      scope: punctuation.section.braces.end.excel
      pop: 1
    # The specification of row vs column should technically be locale dependent, but works fine otherwise.
    - match: \,
      scope: punctuation.separator.sequence.column.excel
    - match: ;
      scope: punctuation.separator.sequence.row.excel
    - include: expressions

###[ LITERALS ]################################################################

  constants:
    - match: '#NULL!'
      scope: constant.language.null.excel

    - match: (#NUM!|#DIV/0!)
      scope: constant.language.nan.excel

    - match: (?:#VALUE!|#REF!|#NAME\?|#GETTING_DATA|#N/A)
      scope: constant.language.excel

    - match: \b(?i)TRUE\b
      scope: constant.language.boolean.true.excel

    - match: \b(?i)FALSE\b
      scope: constant.language.boolean.false.excel

    - include: numbers

    # TODO: only include wildcards where appropriate
    - include: strings-with-wildcards

    # Here is a list of the most common functions that allow wildcards:
    # AVERAGEIF, AVERAGEIFS
    # COUNTIF, COUNTIFS
    # MAXIFS, MINIFS
    # SUMIF, SUMIFS
    # VLOOKUP, HLOOKUP
    # MATCH
    # SEARCH

  # Update: Allow commas to be used as decimal separators. Can cause scope
  # conflict depending on locale, but allows commas and periods to be formatted
  # the same color in most, if not all, contexts in Sublime's default color scheme
  # # Conflict example: =SUM(0,0)
  numbers:
    - match: -?\d+(\.|,)\d*|-?(\.|,)\d+
      scope: meta.number.float.decimal.excel constant.numeric.value.excel
      captures:
        1: punctuation.separator.decimal.excel
        2: punctuation.separator.decimal.excel
    - match: -?\d+
      scope: meta.number.integer.decimal.excel constant.numeric.value.excel

  strings:
    - match: '"'
      scope: punctuation.definition.string.begin.excel
      push: string-body

  string-body:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.excel

    - match: '""'
      scope: constant.character.escape.excel
    - match: '"'
      scope: punctuation.definition.string.end.excel
      pop: 1

  strings-with-wildcards:
    - match: '"'
      scope: punctuation.definition.string.begin.excel
      push: string-body-with-wildcards

  string-body-with-wildcards:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.excel

    # Tilde escapes wildcards and itself, but can also be used by itself and
    # functions as a literal
    - match: ~(?:~|{{string_wildcard}})
      scope: constant.character.escape.excel
    - match: '{{string_wildcard}}'
      scope: keyword.operator.wildcard.excel
    - include: string-body

###[ PROTOTYPES ]##############################################################

  immediately-pop:
    - match: ''
      pop: 1

  # # Didn't turn out to need one of these
  # else-pop:
  #   - match: (?=\S)
  #     pop: 1
