%YAML 1.2
---
name: Excel formula
# Made by Alco#0424 with help from [Q4]Fry#2960
# Repo: https://github.com/axemonk/Excel-formula
# Please send any bug reports/suggestions to me via a direct message on Discord
# v1.2.0 4/29/2023
file_extensions: []
scope: source.excel
version: 2

contexts:
  main:
    # Matches assignment operator '='
    - match: ^=
      scope: keyword.operator.assignment.excel
    - include: formula

  formula:
    - include: keywords
    - include: operators
    - include: references
    - include: constants
    - include: groups

  groups:
    - match: \(
      scope: punctuation.section.group.begin.excel
      push: inside_function
    - match: \{
      scope: punctuation.section.group.begin.excel
      push: inside_array
    - match: \[
      scope: punctuation.section.group.begin.excel
      push: inside_column

  inside_function:
    - meta_scope: meta.function.excel
    - match: \)
      scope: punctuation.section.group.end.excel
      pop: 1
    - match: \,
      scope: punctuation.separator.sequence.excel
    - include: formula

  inside_array:
    - meta_scope: meta.array.excel
    - match: \}
      scope: punctuation.section.group.end.excel
      pop: 1
    - match: '[,;]'
      scope: punctuation.separator.sequence.excel
    - include: formula

  inside_column:
    - meta_scope: meta.column.excel
    - match: \]
      scope: punctuation.section.group.end.excel
      pop: 1
    - match: '[,:]'
      scope: punctuation.separator.sequence.excel
    - include: formula


  keywords:
    # # Included as a "support." function in line with convention in that
    # # the vast majority of functions in excel are provided by what I would consider the 'Excel framework'.
    # # TODO?: The exception being user-defined lambda functions
    # # (soln?: check to see if a word before a '(' is not in the list of all Excel functions) (prblm: will easily deprecate)

    # Matches functions
    - match: '[A-Za-z\.]+(?=\()'
      scope: support.function.excel

  operators:

    # Matches logical operator (e.g., 'A1 = B2')
    - match: =
      scope: keyword.operator.logical.excel

    # Matches mathematical operators
    - match: '[+\-*/^%]'
      scope: keyword.operator.arithmetic.excel

    - match: \&
      scope: keyword.operator.concatenation.excel

    - match: (#|@)
      scope: keyword.operator.reference.excel

  # references2:
  #   - match: (?=[A-Za-z]+[0-9]+)
  #     push: cell-reference

  references:
    # # These four were tricky when reworking the scopes to be in line with convention.
    # #
    # # I tried to balance actually having them colored differently in the default sublime color scheme,
    # # as is helpful to have in a tightly-packed Excel formula, while at the same time
    # # having the scope names align with what these various references represent from a code perspective.
    # #
    # # This proved to be *very* difficult for cell and column references (see cop-out: storage.type.excel),
    # # but for sheet and table name references, .struct. seems to fit well under the definition:
    # #
    # # # struct: "a composite data type (or record) declaration that defines a physically grouped list of variables
    # # #          under one name in a block of memory"

    # Matches table name references
    - match: '[A-Za-z0-9._?\\]+(?=\[)'
      scope: entity.name.struct.excel

    # Matches sheet name references
    - match: ([A-Za-z0-9_]+|'.+')+(!)
      scope: meta.reference.excel  # TODO: At some point, all references of any size get exactly one copy of the same meta scope
      captures:
        1: entity.name.struct.excel
        2: punctuation.separator.sequence.excel

    # Matches A1 format '[sheet!]cell:cell' references
    - match: (\$?[a-zA-Z]+\$?[0-9]+)(:)(\$?([a-zA-Z]+\$?[0-9]+\$?)?)
      scope: meta.reference.excel
      captures:
        1: storage.type.excel
        2: punctuation.separator.sequence.excel
        3: storage.type.excel

    # Matches A1 format '[sheet!]cell' references
    - match: \$?[a-zA-Z]+\$?[0-9]+
      scope: storage.type.excel

    # Matches the names of columns in column references
    - match: ([^\[\]])+(?=\])
      scope: storage.type.excel

  constants:
    - match: \b(?i:TRUE|FALSE)\b
      scope: constant.language.boolean.excel
    - include: numbers
    - include: strings

  numbers:
    - match: ([0-9]+)(?:\.\d+)?
      scope: constant.numeric.excel

  strings:
    - match: '"'
      scope: punctuation.definition.string.begin.excel
      push: inside_string

  inside_string:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.excel
    - match: '""'
      scope: constant.character.escape.excel
    - match: '"'
      scope: punctuation.definition.string.end.excel
      pop: true
    # Not technically applicable to all strings, but probably fine, yes?
    - match: '[*?]'
      scope: keyword.operator.wildcard.excel
